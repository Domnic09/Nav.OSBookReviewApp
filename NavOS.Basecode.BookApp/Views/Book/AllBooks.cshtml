@using NavOS.Basecode.Services.ServiceModels;
@{
    ViewData["Title"] = "All Books";
    var books = ViewData["AllBooks"] as List<NavOS.Basecode.Services.ServiceModels.BookViewModel>;
    var reviews = ViewData["Reviews"] as List<NavOS.Basecode.Services.ServiceModels.ReviewViewModel>;
    var genres = ViewData["Genre"] as List<NavOS.Basecode.Services.ServiceModels.GenreViewModel>;

    //pagination 10 books per page
    int pageSize = 10;
    int currentPage = ViewContext.HttpContext.Request.Query["page"].FirstOrDefault() != null
                    ? int.Parse(ViewContext.HttpContext.Request.Query["page"])
                    : 1;
    int totalItems = books.Count;
    int totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    int startIndex = (currentPage - 1) * pageSize;
    int bookNumber = startIndex + 1;
    int endIndex = Math.Min(startIndex + pageSize, totalItems);
    List<BookViewModel> pageData = books.GetRange(startIndex, endIndex - startIndex);

    //sort the books according to reviews by default
    var reviewsCountByBookId = reviews
        .GroupBy(r => r.BookId)
        .ToDictionary(g => g.Key, g => g.Count());

    var sortedBooks = books.OrderByDescending(book => reviewsCountByBookId.ContainsKey(book.BookId) ? reviewsCountByBookId[book.BookId] : 0);

    // Calculate the avg. rate & count no. of reviews for each book
    var bookAverages = sortedBooks.Select(book => new
    {
        BookId = book.BookId,
        AverageRate = reviews
            .Where(r => r.BookId == book.BookId)
            .Select(r => (double?)r.Rate)
            .Average() ?? 0.0,
        ReviewCount = reviews
            .Count(r => r.BookId == book.BookId)
    });
}
<style>
    .summary-truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 4;
        -webkit-box-orient: vertical;
    }
    .pagination .page-item.active a {
        background-color: #00A651;
        box-shadow: none;
    }

    .pagination .page-item:not(.active) a {
        background-color: transparent;
        color: #000;
    }

    .pagination .page-item a {
        border: none;
    }

    .pagination .page-item a:hover {
        background-color: #00A651;
        color: white;
    }
</style>

<div class="container">
    <div class="row mt-5" style="border: 1px solid #fff;"> 
        <!-- Header Container -->
        <div class="col-md-12" style="background-color:#FFC119">
            <div class="d-flex justify-content-between align-items-center">
                <span class="float-start text-center fst-italic my-2 text-dark fw-bold" style="color: @(string.IsNullOrEmpty(Context.Request.Query["filter"]) && string.IsNullOrEmpty(Context.Request.Query["searchQuery"]) ? "#00A651" : "inherit"); font-style: @(string.IsNullOrEmpty(Context.Request.Query["filter"]) && string.IsNullOrEmpty(Context.Request.Query["searchQuery"]) ? "italic" : "normal");">
                    @if (!string.IsNullOrEmpty(Context.Request.Query["filter"]))
                    {
                        @("LIST | BOOKS | " + Context.Request.Query["filter"].ToString().ToUpper() + " | " + Context.Request.Query["searchQuery"])
                    }
                    else if (!string.IsNullOrEmpty(Context.Request.Query["searchQuery"]))
                    {
                        @("LIST | BOOKS | " + Context.Request.Query["searchQuery"])
                    }
                    else
                    {
                        @("LIST | BOOKS")
                    }
                </span>
                <!-- Pagination -->
                <nav aria-label="Page navigation" style="margin-bottom:-14.5px;">
                    <ul class="pagination">
                        @if (currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?filter=@Context.Request.Query["filter"]&sort=@Context.Request.Query["sort"]&searchQuery=@Context.Request.Query["searchQuery"]&page=@(currentPage - 1)" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }

                        @for (int i = currentPage - 2; i <= currentPage + 2; i++)
                        {
                            if (i >= 1 && i <= totalPages)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <a class="page-link" href="?filter=@Context.Request.Query["filter"]&sort=@Context.Request.Query["sort"]&searchQuery=@Context.Request.Query["searchQuery"]&page=@i">@i</a>
                                </li>
                            }
                        }

                        @if (currentPage < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?filter=@Context.Request.Query["filter"]&sort=@Context.Request.Query["sort"]&searchQuery=@Context.Request.Query["searchQuery"]&page=@(currentPage + 1)" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
        <!-- Search -->
        <div class="row ms-1">
            <form asp-controller="Book" asp-action="AllBooks" method="get" class="mt-3">
                <div class="input-group" style="width:99%;">
                    <input type="text" name="searchQuery" class="form-control" placeholder="Search..." value="@ViewBag.SearchQuery" style="box-shadow:none;">
                    <input type="hidden" name="filter" value="@ViewContext.HttpContext.Request.Query["filter"]" />
                </div>
            </form>
        </div>
        <div class="row" style="margin-top:-10px;">
            <!-- Filter button section -->
            <div class="col-12 mt-2 float-end">
                <div class="container">
                    <div class="row">
                        <div class="col-md-1 col-4 mt-3">
                            <a href="?filter=all&sort=All" class="w-100 btn btn-outline-warning @(string.Equals(ViewContext.HttpContext.Request.Query["filter"].ToString(), "all", StringComparison.OrdinalIgnoreCase) ? "active text-dark" : "text-white")" style="box-shadow:none; text-decoration: none; color: inherit; margin-left:5px;">
                                All
                            </a>
                        </div>
                        <div class="col-md-1 col-4 mt-3">
                            <a href="?filter=title&sort=title" class="w-100 btn btn-outline-warning @(string.Equals(ViewContext.HttpContext.Request.Query["filter"].ToString(), "title", StringComparison.OrdinalIgnoreCase) ? "active text-dark" : "text-white")" style="box-shadow:none; text-decoration: none; color: inherit;">
                                Title
                            </a>
                        </div>
                        <div class="col-md-1 col-4 mt-3">
                            <a href="?filter=author&sort=author" class="w-100 btn btn-outline-warning @(string.Equals(ViewContext.HttpContext.Request.Query["filter"].ToString(), "author", StringComparison.OrdinalIgnoreCase) ? "active text-dark" : "text-white")" style="box-shadow:none; text-decoration: none; color: inherit;">
                                Author
                            </a>
                        </div>
                        <div class="col-md-1 col-4 mt-3">
                            <button type="button" style="box-shadow:none; text-decoration: none; color: inherit;" class="w-100 btn btn-outline-warning text-white" data-toggle="collapse" data-target="#genreFilter">Genre</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Genre list section -->
            <div id="genreFilter" class="collapse">
                <div class="col-12 mt-2">
                    <div class="container">
                        <div class="row">
                            <h4 class="text-white font-weight-light mt-2">Genre</h4>
                             @for (var i = 0; i < genres.Count; i++)
                                {
                                    var genre = genres[i];
                                    var selectedGenres = ViewContext.HttpContext.Request.Query["searchQuery"];
                                    var currentGenre = genre.GenreName;
                                    var isSelected = selectedGenres.ToString() == currentGenre ? "active text-dark" : "text-white";

                                    <div class="col-md-1 col-4 mb-3">
                                        <button type="button" class="w-100 btn btn-outline-warning @(isSelected)" style="min-width: 100px" onclick="location.href='?searchQuery=@(isSelected == "active text-dark" ? "" : currentGenre)&filter=genre'">@currentGenre</button>
                                    </div>
                                 }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (pageData.Any())
        {
            @foreach (var book in pageData)
            {
            <div class="w3-row w3-padding-30 bookLists ms-4" id="bookListContainer">
                <div class="w3-row w3-margin-bottom w3-padding-16">
                    <div class="w3-col" style="width: 250px;">
                        <div class="animateZoom">
                            <a asp-action="BookDetails" asp-controller="Book" asp-route-BookId="@book.BookId" class="text-decoration-none text-dark">
                                <img src="@book.ImageUrl" onerror="this.src='@Url.Content("~/img/default-book.jpg")'" alt="Title">
                            </a>
                                <div class="rating-badge">
                                    <span class="badge badge-primary rounded-circle text-dark">
                                        @(
                                            (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0) % 1 == 0
                                            ? (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0).ToString("0")
                                            : (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0).ToString("0.0")
                                            )
                                        <i class="fa fa-star checked"></i>
                                    </span>
                                </div>
                        </div>
                    </div>
                    <div class="w3-twothird">
@*                      <h3 class="w3-text-orange"><i>#@(bookNumber)</i></h3> *@
                        <div class="animateZoom">
                            <h3><a href="#">@book.BookTitle</a></h3>
                        </div>
                        <div class="animateZoom">
                            <h4><a href="#">@book.Author</a></h4>
                        </div>
                        <small style="font-size: 13px;">
                            <i class='fa fa-star w3-text-yellow'></i>
                                <b>
                                    @(
                                        (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0) % 1 == 0
                                        ? (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0).ToString("0")
                                        : (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0).ToString("0.0")
                                        )
                                </b>Ratings . @(reviewsCountByBookId.ContainsKey(book.BookId) ? reviewsCountByBookId[book.BookId] : 0) reviews
                        </small><br><br>
                        <div class="buttonFlex mb-3">
                            <a asp-action="BookDetails" asp-controller="Book" asp-route-BookId="@book.BookId" class="text-decoration-none text-dark">
                                <span class="animateZoom wantToRead wantToReadText">View Details</span>
                            </a>
                            <div class="line"></div>
                            <a asp-action="BookDetails" asp-controller="Book" asp-route-BookId="@book.BookId" class="text-decoration-none text-dark">
                                <span class="animateZoom wantToRead wantToReadIcon" style="margin-top:-10px;"><i class="fa fa-angle-down"></i></span>
                            </a>
                        </div>
                            <p class="summary-truncate">@book.Summary </p>
                    </div>
                </div>
            </div>
            bookNumber++;
            }
        }
        else
        {
            <div class="row ms-5">
                <span class="text-white mt-5 mb-5">No Books found </span>
            </div>
        }
    </div>
</div>




