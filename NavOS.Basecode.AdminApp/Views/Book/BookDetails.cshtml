@using NavOS.Basecode.Services.ServiceModels;
@{
    ViewData["Title"] = "Book Details";
    var reviews = ViewData["Reviews"] as List<NavOS.Basecode.Services.ServiceModels.ReviewViewModel>;
    var book = ViewData["Book"] as NavOS.Basecode.Services.ServiceModels.BookViewModel;

    string bookId = book.BookId.ToString();
    // Calculate the avg. rate & count no. of reviews where BookId = currentBookId
    double averageRate = reviews
        .Where(r => r.BookId == bookId)
        .Select(r => (double?)r.Rate)
        .Average() ?? 0.0;
    int reviewCount = reviews
        .Count(r => r.BookId == bookId);


}
<Style>
    .rating {
        display: flex;
        align-items: center;
        font-size: 16px;
    }

    .stars {
        display: flex;
        align-items: center;
        gap: 5px;
        margin-top:-17px;
    }

    .star {
        width: 20px;
        height: 20px;
        background: linear-gradient(90deg, yellow 0%, gray 0%);
        clip-path: polygon(50% 0%, 61.8% 38.2%, 100% 38.2%, 69.1% 61.8%, 80.3% 100%, 50% 77.3%, 19.7% 100%, 30.9% 61.8%, 0% 38.2%, 38.2% 38.2%);
    }

    .genre-tags {
        margin-top: 10px;
    }

    .genre-tag {
        position: relative;
        text-decoration: none;
        cursor: pointer;
        color: inherit;
        transition: background-color 0.3s, color 0.3s;
    }

    .genre-tag:hover {
        text-decoration: underline;
        color: #FFC119;
    }

    .star-rating {
        font-size: 25px;
        cursor: pointer;
    }

    .star-rating:hover {
        color: yellow;
    }

    .yellow-star {
        color: yellow !important;
    }
</Style>
<div class="container mt-5">
    <div class="w3-margin" id="bgColor">
        <!-- Header Container -->
        <div class="col-md-12 d-flex justify-content-between align-items-center"style="background-color: #FFC119; height: 35px;">
            <div class="float-start">
                <span class="float-start text-center ms-3 fst-italic text-dark">Released | @book.DateReleased.ToString("MMMM dd, yyyy")</span>
            </div>
            <div class="float-end py-2">
                <a class="text-dark text-decoration-none fw-bold me-2 btn btn-dark text-white" style="font-size:12px; box-shadow:none;" href="javascript:history.back()" type="button"><i class="bi bi-backspace"></i></a>
            </div>
        </div>
        <!--Book Info/Ratings-->
        <div id="details">
            <div class="w3-row w3-padding-30 w3-margin-bottom">
                <div class="w3-col w3-padding-30" style="width:230px">
                    <img src="@book.ImageUrl" class="w3-margin-bottom" height="250" width="210">
                </div>
                <div id="bookInfo" class="w3-col w3-padding-30" style="width:270px">
                    <p id="book1" class="w3-margin-bottom w3-text-orange">@book.BookTitle</p>
                    <p>Author: @book.Author</p>
                    <p>Status: @book.Status</p>
                    <p class="genre-tags">
                        <span>Genre: </span>
                        @foreach (var genre in book.Genre.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            <a href="#" class="genre-tag text-white fw-italic">@genre.Trim()</a>
                        }
                    </p>
                    <p>Volume: @book.Volume</p><br>
                </div>
                <div class="w3-right w3-col" style="width: 258px">
                    <div id="rate-review">
                        <p class="font-italic">
                            <b>@(averageRate % 1 == 0 ? averageRate.ToString("0") : averageRate.ToString("0.0")) / 5 </b>-
                            <span>@reviewCount.ToString("N0") Reviews</span>
                        </p>
                    </div>
                    <div class="rating">
                        <p>Ratings:</p>
                        <div class="stars ms-2">
                            @for (int i = 0; i < 5; i++)
                            {
                                double starColorPercentage = 0.0;

                                if (i < Math.Floor(averageRate))
                                {
                                    starColorPercentage = 100.0;
                                }
                                else if (i == Math.Floor(averageRate) && averageRate % 1 > 0)
                                {
                                    starColorPercentage = (averageRate % 1) * 100;
                                }

                                <div class="star" style="background: linear-gradient(90deg, yellow @(starColorPercentage)%, gray @(starColorPercentage)%);"></div>
                            }
                        </div>
                    </div>
                </div>
            </div><br>
                <h6 id="summaryLabel" class="w3-margin-bottom">SUMMARY</h6>
            <div id="summary" class="w3-justify w3-border w3-padding">
                <p>@book.Summary</p>
            </div>
            <h7 id="reviewsLabel" class="w3-margin-bottom mt-3">REVIEWS</h7>
            <!-- USER REVIEW LIST-->
            <div id="leftRightPadding" class="w3-border w3-padding-32">
                @if (reviews.Any(r => r.BookId == book.BookId))
                {
                    @foreach (var review in reviews.Where(r => r.BookId == book.BookId).OrderByDescending(r => r.DateReviewed))
                    {
                        <div class="w3-border w3-padding">
                            <div class="w3-row">
                                <div id="userReviewDate" class="w3-rest w3-right w3-margin-bottom">
                                    <small><i>@review.DateReviewed.ToString("MMMM dd, yyyy hh:mm tt")</i></small>
                                </div>
                                <div class="w3-third">
                                    <span id="reviewName" style="width:150px;">@review.UserName</span>
                                </div>
                                <div class="w3-col">
                                    @foreach (var star in Enumerable.Range(1, review.Rate))
                                    {
                                        <i class="fa fa-star yellow-star"></i>
                                    }
                                    @foreach (var star in Enumerable.Range(1, 5 - review.Rate))
                                    {
                                        <i class="fa fa-star"></i>
                                    }
                                </div>
                            </div>
                            <p id="userReview" class="w3-text-white">@review.ReviewText</p>
                        </div>
                        <br>
                    }
                }
                else
                {
                    <p>No reviews available.</p>
                }
            </div>

        </div>
    </div>
</div>