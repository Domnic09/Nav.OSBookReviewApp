@using NavOS.Basecode.Services.ServiceModels;
@{
    ViewData["Title"] = "Top Books";
    var model = ViewData["TopBooks"] as List<NavOS.Basecode.Services.ServiceModels.BookViewModel>;
    var reviews = ViewData["Reviews"] as List<NavOS.Basecode.Services.ServiceModels.ReviewViewModel>;

    //pagination 10 books per page
    int pageSize = 10;
    int currentPage = ViewContext.HttpContext.Request.Query["page"].FirstOrDefault() != null 
                    ? int.Parse(ViewContext.HttpContext.Request.Query["page"]) 
                    : 1;
    int totalItems = model.Count;
    int totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    int startIndex = (currentPage - 1) * pageSize;
    int endIndex = Math.Min(startIndex + pageSize, totalItems);
    List<BookViewModel> pageData = model.GetRange(startIndex, endIndex - startIndex);

    //sort the books according to reviews by default
    var reviewsCountByBookId = reviews
        .GroupBy(r => r.BookId)
        .ToDictionary(g => g.Key, g => g.Count());

    var sortedBooks = model.OrderByDescending(book => reviewsCountByBookId.ContainsKey(book.BookId) ? reviewsCountByBookId[book.BookId] : 0);
    
    // Calculate the avg. rate & count no. of reviews for each book
    var bookAverages = sortedBooks.Select(book => new
    {
        BookId = book.BookId,
        AverageRate = reviews
            .Where(r => r.BookId == book.BookId)
            .Select(r => (double?)r.Rate)
            .Average() ?? 0.0,
        ReviewCount = reviews
            .Count(r => r.BookId == book.BookId)
    });


}

<style>
    .ellipsis {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }

    .pagination .page-item.active a {
        background-color: #00A651;
        box-shadow: none;
    }

    .pagination .page-item:not(.active) a {
        background-color: transparent;
        color: #000;
    }

    .pagination .page-item a {
        border: none;
    }

    .pagination .page-item a:hover {
        background-color: #00A651;
        color: white;
    }

    .rating-badge {
        position: absolute;
        top: -12px;
        right: -12px;
        z-index: 1;
        width: 40px;
        height: 40px;
        background-color: #FFC119;
        color: #f000;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .rating-badge .badge {
            display: inline-block;
            padding: 8px 15px;
            border-radius: 50%;
        }

</style>

<div class="container mt-5">
    <div class="row" style="border: 1px solid #fff;">
        <!-- Header Container -->
        <div class="col-md-12" style="background-color:#FFC119">
            <div class="d-flex justify-content-between align-items-center">
                <span class="float-start text-center fst-italic my-2 text-dark">List | Top Books</span>
                <!-- Pagination -->
                <nav aria-label="Page navigation" style="margin-bottom:-14.5px;">
                    <ul class="pagination">
                        @if (currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?page=@(currentPage - 1)" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }

                        @for (int i = currentPage - 2; i <= currentPage + 2; i++)
                        {
                            if (i >= 1 && i <= totalPages)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <a class="page-link" href="?page=@i">@i</a>
                                </li>
                            }
                        }

                        @if (currentPage < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?page=@(currentPage + 1)" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
        <!-- Search -->
        <form asp-controller="Book" asp-action="TopBooks" method="get" class="mt-3">
            <div class="input-group">
                <input type="text" name="searchQuery" class="form-control" placeholder="Search..." value="@ViewBag.SearchQuery" style="box-shadow:none;">
            </div>
        </form>
        <!-- Filter button -->
 
        <!-- Book List -->
        <div class="col-md-12 mx-2 mt-2">
            <ul class="row mt-3 list-unstyled mx-auto" style="padding-left: 0;">
                @if (pageData.Any())
                {
                    @foreach (var book in sortedBooks)
                    {
                        <li class="col-10 col-md-3 col-xl-2 mb-3 mx-3">
                            <div class="card w-100" style="height: 100%;">
                                <a asp-action="BookDetails" asp-controller="Book" asp-route-BookId="@book.BookId" class="text-decoration-none text-dark">
                                    <div class="rating-badge">
                                        <span class="badge badge-primary rounded-circle text-dark">
                                            @(
                                                (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0) % 1 == 0
                                                ? (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0).ToString("0")
                                                : (bookAverages.FirstOrDefault(b => b.BookId == book.BookId)?.AverageRate ?? 0.0).ToString("0.0")
                                                )
                                            <i class="fa fa-star checked"></i>
                                        </span>
                                    </div>
                                    <img class="card-img-top" height="250" width="100" src="@book.ImageUrl" alt="Card image cap" onerror="this.src='@Url.Content("~/img/default-book.jpg")'" style="border: 1px solid #fff;">
                                    <div class="card-body text-center d-flex justify-content-center" style="height:90px;background-color:#212529; margin-top:-15px; border: 1px solid #fff; margin-bottom:-20px;">
                                        <h6 class="card-title ellipsis text-white">@book.BookTitle</h6>
                                    </div>
                                    <div class="card-footer text-center d-flex justify-content-start" style="height:40px; background-color:#212529; border: 1px solid #fff; border-top: none;">
                                        <span class="card-title ellipsis text-white" style="margin-top:-5px;font-size:12px;">
                                            @(reviewsCountByBookId.ContainsKey(book.BookId) ? reviewsCountByBookId[book.BookId] : 0)
                                            <i class="fas fa-book"></i>
                                        </span>
                                    </div>
                                </a>
                            </div>
                        </li>
                    }
                }
                else
                {
                    <span class="text-white">No Books found </span>
                }
            </ul>
        </div>
    </div>
</div>





