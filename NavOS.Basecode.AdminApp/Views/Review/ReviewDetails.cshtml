@using NavOS.Basecode.Services.Helper
@model List<NavOS.Basecode.Services.ServiceModels.ReviewViewModel>
@{
    int pageSize = 5;
    string currentPageQueryString = Context.Request.Query["page"];
    var (currentPage, totalItems, totalPages, startIndex, reviewNumber, reviewsToDisplay) =
        ReviewPaginationHelper.GetPagination(pageSize, Model, currentPageQueryString);
}

@if (reviewsToDisplay != null && reviewsToDisplay.Count > 0)
{
    @foreach (var review in reviewsToDisplay)
    {
        <div class="w3-border w3-padding">
            <div class="w3-row">
                <div id="userReviewDate" class="w3-rest w3-right w3-margin-bottom">
                    <small><i>@review.DateReviewed.ToString("MMMM dd, yyyy hh:mm tt")</i></small>
                </div>
                <div class="w3-third">
                    <span id="reviewName" style="width:150px;">@review.UserName</span>
                </div>
                <div class="w3-col">
                    @foreach (var star in Enumerable.Range(1, review.Rate))
                    {
                        <i class="fa fa-star yellow-star"></i>
                    }
                    @foreach (var star in Enumerable.Range(1, 5 - review.Rate))
                    {
                        <i class="fa fa-star"></i>
                    }
                </div>
            </div>
            <p id="userReview" class="w3-text-white">@review.ReviewText</p>
        </div>
        <br>
    }
    <!-- Pagination -->
    <div class="d-flex justify-content-center">
        <nav aria-label="Page navigation" style="margin-bottom:-14.5px;">
            <ul class="pagination">
                @if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("BookDetails", "Book", new { BookId = Context.Request.Query["BookId"], page = currentPage - 1 })" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int i = Math.Max(1, currentPage - 1); i <= Math.Min(totalPages, currentPage + 1); i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("BookDetails", "Book", new { BookId = Context.Request.Query["BookId"], page = i })">@i</a>
                    </li>
                }

                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("BookDetails", "Book", new { BookId = Context.Request.Query["BookId"], page = currentPage + 1 })" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}
else
{
    <p>No reviews available.</p>
}
